package com.bgi.esm.monitoring.portlets.DataMapRules;

import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.List;
import org.apache.log4j.Logger;
import com.bgi.esm.monitoring.portlets.DataMapRules.forms.DataMap;

public class DataMapGenerator
{
    final private static Logger _log = Logger.getLogger ( DataMapGenerator.class );

    public static String generateOpenviewDataMap ( String filename )
    {
        List <DataMap> allDataMapRules = DataMap.selectAll();
        WeakReference <StringBuilder> contents = new WeakReference <StringBuilder> ( new StringBuilder() );

        //  Generate File Header
        contents.get().append ( "# The available variables are the same as the attribute names of\n" );
        contents.get().append ( "# the OPCDTYPE_MESSAGE. This definition can be found in Chapter 4\n" );
        contents.get().append ( "# pg 196 of the HP Openview Developer's Toolkit Application Integration\n" );
        contents.get().append ( "# guide.\n" );
        contents.get().append ( "#\n" );
        contents.get().append ( "# OPCDATA_MSGID\n" );
        contents.get().append ( "# OPCDATA_NODENAME\n" );
        contents.get().append ( "# OPCDATA_CREATION_TIME\n" );
        contents.get().append ( "# OPCDATA_RECEIVE_TIME\n" );
        contents.get().append ( "# OPCDATA_MSGTYPE\n" );
        contents.get().append ( "# OPCDATA_GROUP\n" );
        contents.get().append ( "# OPCDATA_OBJECT\n" );
        contents.get().append ( "# OPCDATA_APPLICATION\n" );
        contents.get().append ( "# OPCDATA_SEVERITY\n" );
        contents.get().append ( "# OPCDATA_AACTION_NODE\n" );
        contents.get().append ( "# OPCDATA_AACTION_CALL\n" );
        contents.get().append ( "# OPCDATA_AACTION_ANNOTATE\n" );
        contents.get().append ( "# OPCDATA_AACTION_ACK\n" );
        contents.get().append ( "# OPCDATA_OPACTION_NODE\n" );
        contents.get().append ( "# OPCDATA_OPACTION_CALL\n" );
        contents.get().append ( "# OPCDATA_OPACTION_ANNOTATE\n" );
        contents.get().append ( "# OPCDATA_OPACTION_ACK\n" );
        contents.get().append ( "# OPCDATA_MSG_LOG_ONLY\n" );
        contents.get().append ( "# OPCDATA_UNMATCHED\n" );
        contents.get().append ( "# OPCDATA_TROUBLETICKET\n" );
        contents.get().append ( "# OPCDATA_TROUBLETICKET_ACK\n" );
        contents.get().append ( "# OPCDATA_NOTIFICATION\n" );
        contents.get().append ( "# OPCDATA_INSTR_IF_TYPE\n" );
        contents.get().append ( "# OPCDATA_INSTR_IF\n" );
        contents.get().append ( "# OPCDATA_INSTR_PAR\n" );
        contents.get().append ( "# OPCDATA_MSGSRC\n" );
        contents.get().append ( "# OPCDATA_MSGTEXT\n" );
        contents.get().append ( "# OPCDATA_ORIGMSGTEXT\n" );
        contents.get().append ( "# OPCDATA_ANNOTATIONS\n" );
        contents.get().append ( "# OPCDATA_LAST_ANNOTATION\n" );
        contents.get().append ( "#\n" );
        contents.get().append ( "# The following are the SCAuto created variables\n" );
        contents.get().append ( "#\n" );
        contents.get().append ( "# INSTALLDIR         - the home directory of product\n" );
        contents.get().append ( "#\n" );
        contents.get().append ( "# SC_MSGTYPE         - OPC message types\n" );
        contents.get().append ( "#   valid values are:\n" );
        contents.get().append ( "#      \"New message\"\n" );
        contents.get().append ( "#      \"Message Owned by a user\"\n" );
        contents.get().append ( "#      \"Message Disowned by a user\"\n" );
        contents.get().append ( "#      \"Message Acknowledged\"\n" );
        contents.get().append ( "#      \"Message has new annotation(s)\"\n" );
        contents.get().append ( "#      \"All annotations of Message deleted\"\n" );
        contents.get().append ( "#      \"Message was ecalated\"\n" );
        contents.get().append ( "#      \"Message was ecalated from another server\"\n" );
        contents.get().append ( "#      \"Automatic action of message started\"\n" );
        contents.get().append ( "#      \"Automatic action of message finished\"\n" );
        contents.get().append ( "#      \"Operator initiated action of message started\"\n" );
        contents.get().append ( "#      \"Operator initiated action of message finished\"\n" );
        contents.get().append ( "#\n" );
        contents.get().append ( "# SC_PROBLEM_NUMBER  - The ServiceCenter Problem Number embeded\n" );
        contents.get().append ( "#                      in the ITO Message annotation text.\n" );
        contents.get().append ( "#\n" );
        contents.get().append ( "# To Peregrine field map:\n" );
        contents.get().append ( "# -----------------------\n" );
        contents.get().append ( "# logical.name\n" );
        contents.get().append ( "# network.name\n" );
        contents.get().append ( "# device.name\n" );
        contents.get().append ( "# reference.no\n" );
        contents.get().append ( "# cause.code\n" );
        contents.get().append ( "# action\n" );
        contents.get().append ( "# action2\n" );
        contents.get().append ( "# action3\n" );
        contents.get().append ( "# network.address\n" );
        contents.get().append ( "# type\n" );
        contents.get().append ( "# category\n" );
        contents.get().append ( "# subcategory\n" );
        contents.get().append ( "# product.type\n" );
        contents.get().append ( "# problem.type\n" );
        contents.get().append ( "# contact.location\n" );
        contents.get().append ( "# severity.code\n" );
        contents.get().append ( "# failing.component\n" );
        contents.get().append ( "# system\n" );
        contents.get().append ( "# model\n" );
        contents.get().append ( "# serial.no\n" );
        contents.get().append ( "# vendor\n" );
        contents.get().append ( "# assignment\n" );
        contents.get().append ( "# objid\n" );
        contents.get().append ( "# version\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# create only if its a new message from OPC\n" );
        contents.get().append ( "if { $SC_MSGTYPE != \"New message\" } { \n" );
        contents.get().append ( "    set debugFile [open $INSTALLDIR./scito.log a]\n" );
        contents.get().append ( "    puts $debugFile \"[clock format [clock seconds] -format \"%m/%d/%Y %T\"] eventmapTTI.tcl: skipping event - $SC_MSGTYPE\"\n" );
        contents.get().append ( "    close $debugFile\n" );
        contents.get().append ( "    return \n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# skip ServiceCenter events\n" );
        contents.get().append ( "if { $OPCDATA_APPLICATION == \"scevmon\" } {\n" );
        contents.get().append ( "   return\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# Uppercase OPCDATA_GROUP\n" );
        contents.get().append ( "set opcMessageGroup [ string tolower $OPCDATA_GROUP ]\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# skip ServiceCenter events\n" );
        contents.get().append ( "if { $opcMessageGroup == \"SERVICECENTER\" } { \n" );
        contents.get().append ( "#   set debugFile [open $INSTALLDIR./scito.log a]\n" );
        contents.get().append ( "#    puts $debugFile \"[clock format [clock seconds] -format \"%m/%d/%Y %T\"] eventmapTTI.tcl: skipping ServiceCenter event - $SC_MSGTYPE\"\n" );
        contents.get().append ( "#    close $debugFile\n" );
        contents.get().append ( "#    return \n" );
        contents.get().append ( "#}\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# create the event object\n" );
        contents.get().append ( "create_sc_event eventObject\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# set the event type using a template to define field names\n" );
        contents.get().append ( "# * if you don't use a template, you can use integer\n" );
        contents.get().append ( "# * indexes into the evfield array.\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "### This is the file to use for field mappings.\n" );
        contents.get().append ( "###  If anything changes in the field mapping, the Peregrine Support team\n" );
        contents.get().append ( "###  has to make corresponding changes to the Event Services map(s).\n" );
        contents.get().append ( "eventObject set_evtype vpopmo use_template \"EventMap/ToSC/vpopmo.map\"\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# start mapping field names to ITO values\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##\n" );
        contents.get().append ( "## Strip the domain name off of the node name and set the variable nodeName\n" );
        contents.get().append ( "## 04 Oct 2001 - jwn\n" );
        contents.get().append ( "#\n" );
        contents.get().append ( "# get the number of characters to the first period \".\"\n" );
        contents.get().append ( "set nodeLen [ string first \".\" $OPCDATA_NODENAME ]\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# set the var nodeName to the characters up to the first period\n" );
        contents.get().append ( "set nodeName [ string range $OPCDATA_NODENAME 0 [ expr $nodeLen -1 ] ]\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##\n" );
        contents.get().append ( "## End getting the short nodeName\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       shortened NODENAME ($nodeName)  \n" );
        contents.get().append ( "# peregrine: logical.name\n" );
        contents.get().append ( "eventObject set_evfield logical.name $nodeName\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       NODENAME (fqn)\n" );
        contents.get().append ( "# peregrine: network.name (fqn)\n" );
        contents.get().append ( "eventObject set_evfield network.name $OPCDATA_NODENAME\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# 06 Sept 2001 jwn - added device.name \n" );
        contents.get().append ( "# vpo: shortened NODENAME ($nodeName) \n" );
        contents.get().append ( "# peregrine: device.name\n" );
        contents.get().append ( "eventObject set_evfield device.name $nodeName\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       MSGID     \n" );
        contents.get().append ( "# peregrine: reference.no\n" );
        contents.get().append ( "eventObject set_evfield reference.no $OPCDATA_MSGID\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       ???       \n" );
        contents.get().append ( "# peregrine: cause.code\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       MSGTEXT \n" );
        contents.get().append ( "# peregrine: action\n" );
        contents.get().append ( "eventObject set_evfield action $OPCDATA_MSGTEXT\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# Original line to be put back in place when Peregrine is fixed.\n" );
        contents.get().append ( "#eventObject set_evfield action $OPCDATA_MSGTEXT\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       NODENAME (fqn)\n" );
        contents.get().append ( "# peregrine: network.address (fqn)\n" );
        contents.get().append ( "eventObject set_evfield network.address $OPCDATA_NODENAME\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       <none>    \n" );
        contents.get().append ( "# peregrine: type - automatically set to \"VPOEvent\"\n" );
        contents.get().append ( "eventObject set_evfield type VPOEvent\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       <none>    \n" );
        contents.get().append ( "# peregrine: contact.location\n" );
        contents.get().append ( "# \n" );
        contents.get().append ( "# By default this field is set to GLOBAL.\n" );
        contents.get().append ( "#  In some cases a particular VPO Message Group will have to point\n" );
        contents.get().append ( "#  to a specific location (e.g. Netbackup) as there are multiple support\n" );
        contents.get().append ( "#  teams associated with the application / component / system.\n" );
        contents.get().append ( "#\n" );
        contents.get().append ( "# Valid options for Location as of 09-21-2001\n" );
        contents.get().append ( "# (this should be validated with Peregrine):\n" );
        contents.get().append ( "#  GLOBAL\n" );
        contents.get().append ( "#  LON1\n" );
        contents.get().append ( "#  SFO1 \n" );
        contents.get().append ( "#  RAC1 (Swain Center)\n" );
        contents.get().append ( "#  SAC1\n" );
        contents.get().append ( "#  TOK1\n" );
        contents.get().append ( "#  SYD1\n" );
        contents.get().append ( "#  WAC1\n" );
        contents.get().append ( "eventObject set_evfield contact.location GLOBAL\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       GROUP     \n" );
        contents.get().append ( "# peregrine: system\n" );
        contents.get().append ( "eventObject set_evfield system $opcMessageGroup\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       SEVERITY  \n" );
        contents.get().append ( "# peregrine: severity.code\n" );
        contents.get().append ( "### Commented out original.\n" );
        contents.get().append ( "# eventObject set_evfield severity.code $OPCDATA_SEVERITY\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "### Added VPO Criticality to Peregrine Severity Mapping\n" );
        contents.get().append ( "switch $OPCDATA_SEVERITY {\n" );
        contents.get().append ( "	# CRITICAL\n" );
        contents.get().append ( "	# OPC_SEV_CRITICAL\n" );
        contents.get().append ( "	1\n" );
        contents.get().append ( "		{eventObject set_evfield severity.code 2}\n" );
        contents.get().append ( "	# MAJOR\n" );
        contents.get().append ( "	# OPC_SEV_MAJOR\n" );
        contents.get().append ( "	2\n" );
        contents.get().append ( "		{eventObject set_evfield severity.code 3}\n" );
        contents.get().append ( "	# MINOR\n" );
        contents.get().append ( "	# OPC_SEV_MINOR\n" );
        contents.get().append ( "	3\n" );
        contents.get().append ( "		{eventObject set_evfield severity.code 4}\n" );
        contents.get().append ( "	# WARNING\n" );
        contents.get().append ( "	# OPC_SEV_WARNING\n" );
        contents.get().append ( "	4\n" );
        contents.get().append ( "		{eventObject set_evfield severity.code 5}\n" );
        contents.get().append ( "	# Everything else\n" );
        contents.get().append ( "	default\n" );
        contents.get().append ( "		{eventObject set_evfield severity.code 5}\n" );
        contents.get().append ( " }\n" );
        contents.get().append ( "		\n" );
        contents.get().append ( "# vpo:       GROUP + OBJECT + APPLICATION + MSGSRC  \n" );
        contents.get().append ( "# peregrine: failing.component\n" );
        contents.get().append ( "eventObject set_evfield failing.component [ concat $opcMessageGroup \",\" $OPCDATA_OBJECT \",\" $OPCDATA_APPLICATION \"'\" $OPCDATA_MSGSRC ]\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       MSGSRC    \n" );
        contents.get().append ( "# peregrine: system\n" );
        contents.get().append ( "eventObject set_evfield system $OPCDATA_MSGSRC\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       APPLICATION  \n" );
        contents.get().append ( "# peregrine: product.type\n" );
        contents.get().append ( "# eventObject set_evfield product.type [ string toupper $OPCDATA_APPLICATION ]\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       OBJECT    \n" );
        contents.get().append ( "# peregrine: problem.type\n" );
        contents.get().append ( "# eventObject set_evfield problem.type [ string toupper $OPCDATA_OBJECT ]\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# vpo:       evaluate GROUP \n" );
        contents.get().append ( "# peregrine: category / subcategory\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# NichJ - Sorted the switch statement in alphabetical order for easier searching...\n" );
        contents.get().append ( "################################################\n" );
        contents.get().append ( "# V - V - V - V Start Main Switch V - V - V - V\n" );
        contents.get().append ( "################################################\n" );
        contents.get().append ( "switch -glob $opcMessageGroup {\n" ); 

        //  Generate File Body
        for ( int counter = 0; counter < allDataMapRules.size(); counter++ )
        {
            DataMap currentRule = allDataMapRules.get ( counter );
            contents.get().append ( "    " );
            contents.get().append ( currentRule.getBgiGroup() );
            contents.get().append ( " {\n" );
            contents.get().append ( "        eventObject set_evfield category     " );
            contents.get().append ( currentRule.getPerCat() );
            contents.get().append ( "\n" );
            contents.get().append ( "        eventObject set_evfield subcategory  " );
            contents.get().append ( currentRule.getPerSubcat() );
            contents.get().append ( "\n" );
            contents.get().append ( "        eventObject set_evfield product.type " );
            contents.get().append ( currentRule.getPerProduct() );
            contents.get().append ( "\n" );
            contents.get().append ( "        eventObject set_evfield problem.type " );
            contents.get().append ( currentRule.getPerProblem() );
            contents.get().append ( "\n" );
            contents.get().append ( "        eventObject set_evfield device.name  $OPCDATA_OBJECT\n" );
            contents.get().append ( "    }\n" );
        }
        
        //  Generate File Footer
        contents.get().append ( "    default {\n" );
        contents.get().append ( "        eventObject set_evfield category     \"SERVERS\"\n" );
        contents.get().append ( "        eventObject set_evfield subcategory  \"ENTERPRISE SYSTEMS MANAGEMENT\"\n" );
        contents.get().append ( "        eventObject set_evfield product.type \"SCAUTO\"\n" );
        contents.get().append ( "        eventObject set_evfield problem.type \"FAULT\"\n" );
        contents.get().append ( "        switch $OPCDATA_SEVERITY {\n" );
        contents.get().append ( "                # CRITICAL\n" );
        contents.get().append ( "                # OPC_SEV_CRITICAL\n" );
        contents.get().append ( "                1\n" );
        contents.get().append ( "                        {eventObject set_evfield severity.code 4}\n" );
        contents.get().append ( "                # MAJOR\n" );
        contents.get().append ( "                # OPC_SEV_MAJOR\n" );
        contents.get().append ( "                2\n" );
        contents.get().append ( "                        {eventObject set_evfield severity.code 4}\n" );
        contents.get().append ( "                # MINOR\n" );
        contents.get().append ( "                # OPC_SEV_MINOR\n" );
        contents.get().append ( "                3\n" );
        contents.get().append ( "                        {eventObject set_evfield severity.code 4}\n" );
        contents.get().append ( "                # WARNING\n" );
        contents.get().append ( "                # OPC_SEV_WARNING\n" );
        contents.get().append ( "                4\n" );
        contents.get().append ( "                        {eventObject set_evfield severity.code 5}\n" );
        contents.get().append ( "                # Everything else\n" );
        contents.get().append ( "                default\n" );
        contents.get().append ( "                        {eventObject set_evfield severity.code 5}\n" );
        contents.get().append ( "        }\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "    } \n" );
        contents.get().append ( "} \n" );
        contents.get().append ( "################################################\n" );
        contents.get().append ( "# ^ - ^ - ^ - ^  End  Main Switch ^ - ^ - ^ - ^\n" );
        contents.get().append ( "################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# print out a debug of event created\n" );
        contents.get().append ( "#eventObject print\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "# send the event to queue\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "set debugFile [open $INSTALLDIR./scito.log a]\n" );
        contents.get().append ( "puts $debugFile \"[clock format [clock seconds] -format \"%m/%d/%Y %T\"] eventmapTTI.tcl: queueing new ticket to be opened.       -- $OPCDATA_MSGID\"\n" );
        contents.get().append ( "close $debugFile\n" );
        contents.get().append ( "eventObject send\n" );

        saveToFile ( filename, contents.get().toString() );

        return contents.get().toString();
    }

    public static String generateServiceCenterDataMap ( String filename )
    {
        List <DataMap> allDataMapRules = DataMap.selectAll();

        WeakReference <StringBuilder> contents = new WeakReference <StringBuilder> ( new StringBuilder() );

        //  Generate File Header
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### Package Name #############################################################\n" );
        contents.get().append ( "package BGI::ESM::VpoServer::DataMap;\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### Module Use Section #######################################################\n" );
        contents.get().append ( "use 5.008000;\n" );
        contents.get().append ( "use strict;\n" );
        contents.get().append ( "use warnings;\n" );
        contents.get().append ( "use Data::Dumper;\n" );
        contents.get().append ( "use Carp;\n" );
        contents.get().append ( "use lib \"/code/vpo/BGI-ESM/lib\";     # Windows - assumes cvs checkout is at /code\n" );
        contents.get().append ( "use lib \"/apps/esm/vpo/BGI-ESM/lib\"; # UNIX    - assumes cvs checkout is at /apps/esm\n" );
        contents.get().append ( "use BGI::ESM::Common::Shared qw(os_type check_os);\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### Require Section ##########################################################\n" );
        contents.get().append ( "require Exporter;\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### Who is this ##############################################################\n" );
        contents.get().append ( "our @ISA = qw(Exporter BGI::ESM::VpoServer);\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### Public Exports ###########################################################\n" );
        contents.get().append ( "# This allows declaration	use BGI::VPO ':all';\n" );
        contents.get().append ( "# If you do not need this, moving things directly into @EXPORT or @EXPORT_OK\n" );
        contents.get().append ( "# will save memory.\n" );
        contents.get().append ( "our %EXPORT_TAGS = ( 'all' => [ qw( ) ] );\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "our @EXPORT = qw(\n" );
        contents.get().append ( "	get_ap_group_name\n" );
        contents.get().append ( "	get_data_map_record\n" );
        contents.get().append ( "	data_map_get_method\n" );
        contents.get().append ( "	get_ap_action_script\n" );
        contents.get().append ( "	data_map_print_all_apps\n" );
        contents.get().append ( "	data_map_get_all_apps\n" );
        contents.get().append ( "	data_map_print_all_details\n" );
        contents.get().append ( "	data_map_print_app_details\n" );
        contents.get().append ( "	data_map_print_peregrine\n" );
        contents.get().append ( "	data_map_print_apgrp\n" );
        contents.get().append ( "	data_map_print_alarmpoint\n" );
        contents.get().append ( "	data_map_lookup\n" );
        contents.get().append ( "	get_data_map_data\n" );
        contents.get().append ( "	get_datamap_version\n" );
        contents.get().append ( ");\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### VERSION ##################################################################\n" );
        contents.get().append ( "my $VERSION = (qw$Revision: 1.61 $)[-1];\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "# Public Variables\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "# Public Methods / Functions\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 get_datamap_version()\n" );
        contents.get().append ( "	returns version of DataMap module\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub get_datamap_version {\n" );
        contents.get().append ( "	return $VERSION;\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: get_ap_group_name($message_group)\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     get_ap_group_name($message_group)\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  Uses a hash table to lookup the incoming message group's\n" );
        contents.get().append ( "	#                corresponding Alarmpoint group.  Returns the group name.\n" );
        contents.get().append ( "	#                If not found, returns esm.\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      The corresponding alarmpoint group in scalar format\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub get_ap_group_name {\n" );
        contents.get().append ( "	my $message_group = shift;\n" );
        contents.get().append ( "	my $retval        = \"\";\n" );
        contents.get().append ( "	my $data_map;\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	#my $logfile       = \"$PGM_LOGS/data_map.log\";\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	#if ($debug)                                                        { open DM_LOGFILE, \">> $logfile\"; }\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	$data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	## Populating message_group\n" );
        contents.get().append ( "	##\n" );
        contents.get().append ( "	$retval = $data_map->{$message_group}->{'ap_group'};\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	if ($retval eq \"\") {\n" );
        contents.get().append ( "				$retval = \"esm\";\n" );
        contents.get().append ( "	} \n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: get_data_map_record($message_group)\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     get_data_map_record($message_group)\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  Loads the data map hash, looks up the hash associated with $message_group and returns a reference to that hash\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      A hash reference to the hash array associated with $message_group\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub get_data_map_record {\n" );
        contents.get().append ( "	my $message_group = shift;\n" );
        contents.get().append ( "	my $retval        = \"\";\n" );
        contents.get().append ( "	my $data_map;\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	$data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	## Populating message_group\n" );
        contents.get().append ( "	##\n" );
        contents.get().append ( "	$retval = $data_map->{$message_group};\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_get_method($message_group)\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     data_map_get_method($message_group)\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  Loads the data map hash, looks up the hash associated with $message_group and returns the method\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      the alert method (usually ticket, alarmpoint_only, or something similar).\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_get_method {\n" );
        contents.get().append ( "	my $message_group = shift;\n" );
        contents.get().append ( "	my $retval        = \"\";\n" );
        contents.get().append ( "	my $data_map;\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	$data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	## Populating method\n" );
        contents.get().append ( "	##\n" );
        contents.get().append ( "	$retval = $data_map->{$message_group}->{'method'};\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: get_ap_action_script($message_group)\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     get_ap_action_script($message_group)\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  Uses a hash table to lookup the incoming message group's\n" );
        contents.get().append ( "	#                corresponding Alarmpoint action script.  Returns the action script name.\n" );
        contents.get().append ( "	#                If not found, returns the default: BGI On-Call.\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      The corresponding alarmpoint action script in scalar format\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub get_ap_action_script {\n" );
        contents.get().append ( "	my $message_group = shift;\n" );
        contents.get().append ( "	   $message_group = lc $message_group;\n" );
        contents.get().append ( "	my $retval        = \"\";\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	my $data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	$retval = $data_map->{$message_group}->{'ap_script'};\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	if ($retval eq \"\") {\n" );
        contents.get().append ( "				$retval = \"BGI On-Call\";\n" );
        contents.get().append ( "	} \n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_print_all_apps\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     data_map_print_all_apps\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_print_all_apps {\n" );
        contents.get().append ( "	my $retval        = 1;\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	my $data_list = data_map_get_all_apps();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	foreach my $item (@{$data_list}) {\n" );
        contents.get().append ( "	  \n" );
        contents.get().append ( "	  print \"$item\n\";\n" );
        contents.get().append ( "  \n" );
        contents.get().append ( "	}\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_get_all_apps\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     data_map_get_all_apps\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  Gets all applications\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      An array reference to all applications\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_get_all_apps {\n" );
        contents.get().append ( "	my @retval        = ();\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	my $data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	foreach my $key (sort keys %{$data_map}) {\n" );
        contents.get().append ( "	  \n" );
        contents.get().append ( "	  push @retval, $key;\n" );
        contents.get().append ( "  \n" );
        contents.get().append ( "	}\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return \\@retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_print_all_details\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_print_all_details {\n" );
        contents.get().append ( "	my $retval        = 1;\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	my $data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "  foreach my $key (sort keys %{$data_map}) {\n" );
        contents.get().append ( "    my $record = get_data_map_record($key);\n" );
        contents.get().append ( "  \n" );
        contents.get().append ( "    print \"$key\n\";\n" );
        contents.get().append ( "  \n" );
        contents.get().append ( "    foreach my $reckey (keys %{$record}) {\n" );
        contents.get().append ( "      print \"\t\". $reckey . \"=\" . $data_map->{$key}->{$reckey} . \"\n\";\n" );
        contents.get().append ( "    }\n" );
        contents.get().append ( "  }\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_print_app_details\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_print_app_details {\n" );
        contents.get().append ( "	my $message_group = shift;\n" );
        contents.get().append ( "	   $message_group = trim($message_group);\n" );
        contents.get().append ( "	my $retval        = 1;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	my $data_map = get_data_map_data();\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "  my $record = get_data_map_record($message_group);\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "  print $record . \"\n\";\n" );
        contents.get().append ( "  \n" );
        contents.get().append ( "  foreach my $reckey (sort keys %{$record}) {\n" );
        contents.get().append ( "      print \"\t\". $reckey . \" == \" . $data_map->{$message_group}->{$reckey} . \"\n\";\n" );
        contents.get().append ( "  }\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_print_peregrine\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     data_map_print_peregrine\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_print_peregrine {\n" );
        contents.get().append ( "	my $message_group = shift;\n" );
        contents.get().append ( "	   $message_group = trim($message_group);\n" );
        contents.get().append ( "	my $retval        = 1;\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	my $data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "  my $record = get_data_map_record($message_group);\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "  foreach my $reckey (sort keys %{$record}) {\n" );
        contents.get().append ( "    if ($reckey =~ m/^p_/) {\n" );
        contents.get().append ( "      print \"\t\". $reckey . \" == \" . $data_map->{$message_group}->{$reckey} . \"\n\";\n" );
        contents.get().append ( "    }\n" );
        contents.get().append ( "  }\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_print_apgrp\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     data_map_print_apgrp\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  prints the associated alarmpoint group name\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_print_apgrp {\n" );
        contents.get().append ( "	my $message_group = shift;\n" );
        contents.get().append ( "	   $message_group = trim($message_group);\n" );
        contents.get().append ( "	my $retval        = 1;\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	my $data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "  print get_ap_group_name($message_group) . \"\n\";\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_print_alarmpoint($application)\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     data_map_print_alarmpoint($application)\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  prints the associated alarmpoint information\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      \n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_print_alarmpoint {\n" );
        contents.get().append ( "	my $message_group = shift;\n" );
        contents.get().append ( "	   $message_group = trim($message_group);\n" );
        contents.get().append ( "	my $retval        = 1;\n" );
        contents.get().append ( "	\n" );
        contents.get().append ( "	my $data_map = get_data_map_data();\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "  my $record = get_data_map_record($message_group);\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "  foreach my $reckey (sort keys %{$record}) {\n" );
        contents.get().append ( "    if ($reckey =~ m/^ap_/) {\n" );
        contents.get().append ( "      print \"\t\". $reckey . \" == \" . $data_map->{$message_group}->{$reckey} . \"\n\";\n" );
        contents.get().append ( "    }\n" );
        contents.get().append ( "  }\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=head2 Function: data_map_lookup($search_string, $field)\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     data_map_lookup($search_string, $field)\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  search for $search_string in $field\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      reference to hash with results in the format of the data_map\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub data_map_lookup {\n" );
        contents.get().append ( "	my $search_string = shift;\n" );
        contents.get().append ( "	   $search_string = trim($search_string);\n" );
        contents.get().append ( "	my $field_name    = shift;\n" );
        contents.get().append ( "	my $data_map      = get_data_map_data();\n" );
        contents.get().append ( "	my ($retval, $record);\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	## Add logic\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $retval;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "#################################################################################################\n" );
        contents.get().append ( "#################################################################################################\n" );
        contents.get().append ( "###############                          THE DATA MAP                 ###########################\n" );
        contents.get().append ( "#################################################################################################\n" );
        contents.get().append ( "#################################################################################################\n" );
        contents.get().append ( "=head2 Function: get_data_map_data()\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	# v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Function:     get_data_map_data\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Description:  Holds the hash table with the data map information.\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Returns:      A reference to a hash with the data map\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# Requires:     N/A\n" );
        contents.get().append ( "	#\n" );
        contents.get().append ( "	# -------------------------------------------------------------------\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "=cut\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "sub get_data_map_data {\n" );
        contents.get().append ( "	my $data_map;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	$data_map = {\n" );
        contents.get().append ( "\n" );
        
        //  Generate File Body
        for ( int counter = 0; counter < allDataMapRules.size(); counter++ )
        {
            DataMap currentRule = allDataMapRules.get ( counter );
            contents.get().append ( "        '" );
            contents.get().append ( currentRule.getBgiGroup() );
            contents.get().append ( "' => {\n" );
            contents.get().append ( "            'method'      => \"" );  contents.get().append ( currentRule.getBgiMethod()   );  contents.get().append ( "\",\n" );
            contents.get().append ( "            'ap_group'    => \"" );  contents.get().append ( currentRule.getApGroup()     );  contents.get().append ( "\",\n" );
            contents.get().append ( "            'ap_script'   => \"" );  contents.get().append ( currentRule.getApScript()    );  contents.get().append ( "\",\n" );
            contents.get().append ( "            'p_category'  => \"" );  contents.get().append ( currentRule.getPerCat()      );  contents.get().append ( "\",\n" );
            contents.get().append ( "            'p_subcat'    => \"" );  contents.get().append ( currentRule.getPerSubcat()   );  contents.get().append ( "\",\n" );
            contents.get().append ( "            'p_product'   => \"" );  contents.get().append ( currentRule.getPerProduct()  );  contents.get().append ( "\",\n" );
            contents.get().append ( "            'p_problem'   => \"" );  contents.get().append ( currentRule.getPerProblem()  );  contents.get().append ( "\",\n" );
            contents.get().append ( "            'p_asg_grp'   => \"" );  contents.get().append ( currentRule.getPerAssign()   );  contents.get().append ( "\",\n" );
            contents.get().append ( "            'p_location'  => \"" );  contents.get().append ( currentRule.getPerLocation() );  contents.get().append ( "\"\n"  );
            contents.get().append ( "        }\n" );
        }
         
        //  Generate File Footer
        contents.get().append ( "	};\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "	return $data_map;\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "}\n" );
        contents.get().append ( "# ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### End of Public Methods / Functions ########################################\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### Private Methods / Functions ##############################################\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "### End of Private Methods / Functions #######################################\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "# Do not change this.  Required for successful require load\n" );
        contents.get().append ( "1;\n" );
        contents.get().append ( "##############################################################################\n" );
        contents.get().append ( "\n" );
        contents.get().append ( "__END__\n" );
        contents.get().append ( "\n" ); 

        saveToFile ( filename, contents.get().toString() );

        return contents.get().toString();
    }

    private static void saveToFile ( String filename, String contents )
    {
        if ( null != filename )
        {
            try
            {
                FileOutputStream outfile = new FileOutputStream ( filename );
                    outfile.write ( contents.getBytes() );
                outfile.close();
            }
            catch ( IOException exception )
            {
                _log.error ( "Could not save to file: " + filename, exception );
            }
        }
    }
};



        
